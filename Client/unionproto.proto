// This is an example of how to handle 'union' style messages
// with nanopb, without allocating memory for all the message types.
//
// There is no official type in Protocol Buffers for describing unions,
// but they are commonly implemented by filling out exactly one of
// several optional fields.

syntax = "proto2";

message ConnectionCallbackMessage
{
    required bool sucess = 1;
	required string motd = 2;
	required int32 map = 3 ;
}

message ConnectionMessage
{
    required string name = 1;
}

message SpawnMessage
{
    required int32 id = 1;
}

message GameDataMessage
{
    required int32 gameMode = 1;
	required int32 	PlayersConnected = 2;
    repeated Player players = 3;
}
message SDL_Rect
{
	required int32 x = 1;
	required int32 y = 2;
	required int32 h = 3;
	required int32 w = 4;
	
}
message PlayerBase
{
    required int32 id = 2;
	required int32 health = 3;
	required int32 ammo = 4;
	required bool state = 5;
	required SDL_Rect pos = 6;
}
message Player
{
    required PlayerBase playerBase = 1;
  	required int32 step = 2;
	required bool fireIdle = 3;
	required bool walk = 4;
	required int32 orientation = 5;
	required int32 lastAnim = 6;
	required SDL_Rect sprite = 7;
	required int32 deathAnimationState =8;
	required string name = 9;
}

message BulletMessage
{
	required int32 id = 1;
	required int32 state = 2;
	required SDL_Rect pos = 3;
	required SDL_Rect dest = 4;
}

message UnionMessage
{
    optional ConnectionMessage connCallbackMessage = 1;
    optional ConnectionCallbackMessage connMessage = 2;
    optional BulletMessage bulletMessage = 3;
	optional Player playerMessage = 4;
	optional SpawnMessage spawnMessage = 5;
	optional GameDataMessage gameDataMessage = 6;
	
	
}

